package mygame;
import java.awt.*;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;


public class LobbyScreen extends JFrame {
    private JLabel bestScoreLabel, modeLabel;
    private JButton easyBtn, mediumBtn, hardBtn;
    private int bestScore;
    private SoundManager lobbyMusic;
    private JButton soundToggleBtn;
    
    private boolean isSoundOn = true;  // start with sound enabled



    private Image backgroundImg, logoImg;



    private Image zombieImg;
    private Image[] zombieFrames = new Image[4]; // ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö 4 ‡πÄ‡∏ü‡∏£‡∏°
    private int currentFrame = 0;
    private Font customFont;

    public LobbyScreen() {
        setTitle("Lobby");
        setSize(1500, 1200);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);


        try {
            customFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("/assets/PressStart2P-Regular.ttf")).deriveFont(24f);  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(customFont);
        } catch (IOException | FontFormatException e) {
            e.printStackTrace();
        }
        // 1) Create/load your buttons
        // 1) Create/load your buttons
        easyBtn = createStyledButton("Easy", new Color(76, 175, 80));
        mediumBtn = createStyledButton("Medium", new Color(255, 193, 7));
        hardBtn = createStyledButton("Hard", new Color(244, 67, 54));

        lobbyMusic = new SoundManager("/assets/BGM.wav");
        lobbyMusic.play(true);
        initListeners();    

    
        // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        backgroundImg = loadImage("/assets/bag1.png");
        logoImg = loadImage("/assets/logo.png");
    
        // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ
        zombieFrames[0] = loadImage("/assets/Zombie.png");
        zombieFrames[1] = loadImage("/assets/Zombie1.png");
        zombieFrames[2] = loadImage("/assets/Zombie2.png");
        zombieFrames[3] = loadImage("/assets/Zombie3.png");

        
    
        JPanel mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (backgroundImg != null) {
                    g.drawImage(backgroundImg, 0, 0, getWidth(), getHeight(), this);
                } else {
                    g.setColor(Color.BLACK);
                    g.fillRect(0, 0, getWidth(), getHeight());
                }
    
                // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                if (zombieFrames[currentFrame] != null) {
                    int zombieWidth = 800;  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ
                    int zombieHeight = 800;
                    int x = (getWidth() - zombieWidth) / 2;  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
                    int y = getHeight() - zombieHeight - 20 -100; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á
                    g.drawImage(zombieFrames[currentFrame], x, y, zombieWidth, zombieHeight, this);
                }
            }
        };

        mainPanel.setLayout(new BorderLayout());
        add(mainPanel);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Timer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏∏‡∏Å‡πÜ 200 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    Timer timer = new Timer(200, e -> {
        currentFrame = (currentFrame + 1) % 4;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÇ‡∏î‡∏¢‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        repaint();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `paintComponent` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    });
    timer.start(); 
        // **üî∏ Panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô**
        JPanel logoPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (logoImg != null) {
                    int imgWidth = 480;
                    int imgHeight = 480;
                    int x = (getWidth() - imgWidth) / 2;
                    int y = -80;
                    g.drawImage(logoImg, x, y, imgWidth, imgHeight, this);
                }
            }
        };
        logoPanel.setPreferredSize(new Dimension(800, 240));
        logoPanel.setOpaque(false);

        // **üî∏ Panel ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°**
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.setOpaque(false);

        // Label ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        bestScoreLabel = new JLabel("Best Score: 0");
        bestScoreLabel.setFont(customFont.deriveFont(Font.BOLD, 20f));
        bestScoreLabel.setForeground(Color.YELLOW);
        bestScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Label ‡πÇ‡∏´‡∏°‡∏î
        modeLabel = new JLabel("Mode");
        modeLabel.setFont(customFont.deriveFont(Font.BOLD, 24f));
        modeLabel.setForeground(Color.WHITE);
        modeLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

       // ‡∏õ‡∏∏‡πà‡∏°
        easyBtn = createStyledButton("Easy", new Color(76, 175, 80));  
        mediumBtn = createStyledButton("Medium", new Color(255, 193, 7)); 
        hardBtn = createStyledButton("Hard", new Color(244, 67, 54)); 

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°
        Dimension buttonSize = new Dimension(180, 50);  // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        easyBtn.setPreferredSize(buttonSize);
        mediumBtn.setPreferredSize(buttonSize);
        hardBtn.setPreferredSize(buttonSize);

        easyBtn.setMaximumSize(buttonSize);
        mediumBtn.setMaximumSize(buttonSize);
        hardBtn.setMaximumSize(buttonSize);

        easyBtn.setBackground(Color.BLACK);
        mediumBtn.setBackground(Color.BLACK);
        hardBtn.setBackground(Color.BLACK);

        easyBtn.setForeground(Color.WHITE);
        mediumBtn.setForeground(Color.WHITE);
        hardBtn.setForeground(Color.WHITE);

        easyBtn.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
        mediumBtn.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
        hardBtn.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));

        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡πÇ‡∏î‡∏ô
        easyBtn.setRolloverEnabled(true);
        mediumBtn.setRolloverEnabled(true);
        hardBtn.setRolloverEnabled(true);

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ß‡∏≤‡∏á
        easyBtn.setContentAreaFilled(true);
        mediumBtn.setContentAreaFilled(true);
        hardBtn.setContentAreaFilled(true);

        // ‡πÉ‡∏ä‡πâ MouseListener ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
        easyBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                easyBtn.setBackground(Color.GRAY);
                easyBtn.setForeground(Color.BLACK);  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡πÇ‡∏î‡∏ô
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                easyBtn.setBackground(Color.BLACK);  // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏≠‡∏≠‡∏Å
                easyBtn.setForeground(Color.WHITE);  // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            }
        });

        mediumBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mediumBtn.setBackground(Color.GRAY);
                mediumBtn.setForeground(Color.BLACK);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mediumBtn.setBackground(Color.BLACK);
                mediumBtn.setForeground(Color.WHITE);
            }
        });

        hardBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hardBtn.setBackground(Color.GRAY);
                hardBtn.setForeground(Color.BLACK);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                hardBtn.setBackground(Color.BLACK);
                hardBtn.setForeground(Color.WHITE);
            }
        });

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á
        bottomPanel.add(bestScoreLabel);
        bottomPanel.add(Box.createVerticalStrut(40));  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á
        bottomPanel.add(modeLabel);
        bottomPanel.add(Box.createVerticalStrut(30));
        bottomPanel.add(easyBtn);
        bottomPanel.add(Box.createVerticalStrut(20));
        bottomPanel.add(mediumBtn);
        bottomPanel.add(Box.createVerticalStrut(20));
        bottomPanel.add(hardBtn);
        bottomPanel.add(Box.createVerticalStrut(40));

        // **‡πÄ‡∏û‡∏¥‡πà‡∏° Panel ‡∏•‡∏á‡πÉ‡∏ô MainPanel**
        mainPanel.add(logoPanel, BorderLayout.NORTH);
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);

        add(mainPanel);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô method ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á

        initListeners();
    }


    // **üîπ Method ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ**
    private Image loadImage(String path) {
        try {
            return ImageIO.read(getClass().getResource(path));
        } catch (IOException | IllegalArgumentException e) {
            System.err.println("Image not found: " + path);
            return null;
        }
    }

    // **üîπ Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå**
    private JButton createStyledButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFont(customFont.deriveFont(Font.BOLD, 16f));
        button.setForeground(Color.WHITE);
        button.setBackground(bgColor);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        return button;
    }

   
    
    private void initListeners() {
        easyBtn.addActionListener(e -> startGame(Difficulty.EASY));
        mediumBtn.addActionListener(e -> startGame(Difficulty.MEDIUM));
        hardBtn.addActionListener(e -> startGame(Difficulty.HARD));
    }

    private void startGame(Difficulty difficulty) {
        if (lobbyMusic != null) {
            lobbyMusic.stop();
        }

        GameFrame gameFrame = new GameFrame(difficulty);
        gameFrame.setVisible(true);
        dispose(); // ‡∏õ‡∏¥‡∏î Lobby
    }

    public void setBestScore(int newScore) {
    // Only update if newScore is bigger than what we already have
    if (newScore > this.bestScore) {
        this.bestScore = newScore;
    }
    bestScoreLabel.setText("Best Score: " + this.bestScore);
}


}
